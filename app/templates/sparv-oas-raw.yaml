openapi: "3.0.0"
info:
  title: "Sparv API"
  description: |
    Sparv is Språkbanken’s annotation tool and contains a corpus import pipeline
    and a web service including a [web interface](https://spraakbanken.gu.se/sparv/).
    It can be used to annotate shorter texts using the same tools as are applied
    in the annotation of the corpora in [Korp](https://spraakbanken.gu.se/korp) and the texts in
    [Strix](https://spraakbanken.gu.se/strix).

    You can more about Sparv on [Språkbanken's web page](https://spraakbanken.gu.se/eng/research/infrastructure/sparv).
  contact:
    name: Språkbanken
    url: https://spraakbanken.gu.se/
    email: sb@svenska.gu.se
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"
  version: "[VERSION]"
servers:
  - url: https://ws.spraakbanken.gu.se/ws/sparv/v3
    description: Production server
  - url: https://ws.spraakbanken.gu.se/ws/sparvlabb/v3
    description: Lab version
tags:
  - name: Analysis
    description: |
      ### Queries for Annotating Texts

      The default query for the text analysis can be sent as GET or POST requests.
      The latter can be useful for longer texts. In both cases the response is a JSON
      object containing the text analysis in XML format.
      See [Default query](#tag/Analysis/paths/~1/get) for more details.

      It is also possible to upload text or XML files.
      In this case the response is a JSON object with a download link to a zip file
      containing the annotation.
      See [File upload](#tag/Files/paths/~1upload/post) for more details.

      ### Settings
      The web service supports some custom settings, e.g. it lets you choose
      between different tokenizers on word, sentence, and paragraph level
      and you can define which annotations should be generated. Via the settings you
      can also choose the language of your input and you can define whether your input
      is in XML or plain text.

      These settings are provided as a JSON object to the `settings` parameter.
      This object must satisfy the JSON schema that is generated by `/schema` call
      when provided with a `language` and a `mode` parameter:

      [`[SBURL]/schema?language=sv&mode=plain`]([SBURL]/schema?language=sv&mode=plain)

      The schema holds default values for all the attributes. The use of the settings
      parameter is therefore optional.

      This is an example for a request which only generates a dependency analysis:

      [`[SBURL]/?text=Det+trodde+jag+aldrig.&settings={"positional_attributes":{"dependency_attributes":["ref","dephead","deprel"],"lexical_attributes":[],"compound_attributes":[]}}`]([SBURL]/?text=Det+trodde+jag+aldrig.&settings={"positional_attributes":{"dependency_attributes":["ref","dephead","deprel"],"lexical_attributes":[],"compound_attributes":[]}})

      If you are not sure how to define the settings parameter you can get help
      from the [frontend](https://spraakbanken.gu.se/sparv) by clicking
      `Show JSON Settings` under `Show advanced settings`. This will generate
      the JSON object for the chosen settings which is sent in the `settings` parameter.

      ### Analysing other Languages

      The default analysis language is Swedish but Sparv
      also supports other languages. The language is specified by supplying
      a two-letter ISO 639-1 code to the `language` parameter.

      This is an example for an analysis of a German sentence:

      [`[SBURL]/?text=Nun+folgt+ein+deutscher+Beispielsatz.&language=de`]([SBURL]/?text=Nun+folgt+ein+deutscher+Beispielsatz.&language=de)

      Different kinds of settings are supported for different languages, depending on which tool
      is used for the analysis. Please use the [frontend](https://spraakbanken.gu.se/sparv)
      if you want to check what options there are for a certain language.
      Alternatively you can check the JSON schema for the language you want to analyse by sending a schema request, e.g.:

      [`[SBURL]/schema?language=de`]([SBURL]/schema?language=de)

      [This language table](https://spraakbanken.gu.se/eng/research/infrastructure/sparv/distribution/pipeline#language_table)
      provides information on which languages are currently supported and which tools are used for their analysis.

paths:
  /:
    get:
      tags:
        - Analysis
      summary: Default query
      description: |
        When provided with the text parameter this call handles text input and runs the Sparv analysis.

        Example call:

        [`[SBURL]/?text=En+exempelmening+till+nättjänsten`]([SBURL]/?text=En+exempelmening+till+nättjänsten)
      parameters:
        - name: text
          in: query
          required: true
          description: The text to be analysed
          schema:
            type: string
        - $ref: '#/components/parameters/ModeParam'
        - $ref: '#/components/parameters/IncrementalParam'
        - $ref: '#/components/parameters/LanguageParam'
        - $ref: '#/components/parameters/SettingsParam'
      responses:
        '200':
          description: Text analysis in XML
    post:
      tags:
        - Analysis
      summary: Default query
      description: |
        When provided with the text parameter this call handles text input and runs the Sparv analysis.

        Example call using curl:

        ```.bash
        curl -X POST --data-binary text="En exempelmening till nättjänsten" [SBURL]/
        ```
      parameters:
        - name: text
          in: query
          required: true
          description: The text to be analysed
          schema:
            type: string
        - $ref: '#/components/parameters/ModeParam'
        - $ref: '#/components/parameters/IncrementalParam'
        - $ref: '#/components/parameters/LanguageParam'
        - $ref: '#/components/parameters/SettingsParam'
      responses:
        '200':
          description: Text analysis in XML

  /schema:
    get:
      tags:
        - Analysis
      summary: Schema
      description: |
        Returns the json schema generated from the provided parameters.

        Example call:

        [`[SBURL]/schema?language=sv&mode=plain`]([SBURL]/schema?language=sv&mode=plain)
      parameters:
        - $ref: '#/components/parameters/ModeParam'
        - $ref: '#/components/parameters/LanguageParam'
      responses:
        '200':
          description: OK (schema returned)
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/SettingsSchema'
        '500':
          description: Failed to return schema
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/general-error"

  /makefile:
    get:
      tags:
        - Analysis
      summary: Makefile
      description: |
        Returns the Makefile generated from the provided parameters.

        Example call:

        [`[SBURL]/makefile?settings={"positional_attributes":{"dependency_attributes":["ref","dephead","deprel"],"lexical_attributes":[],"compound_attributes":[]}}`]([SBURL]/makefile?settings={"positional_attributes":{"dependency_attributes":["ref","dephead","deprel"],"lexical_attributes":[],"compound_attributes":[]}})
      parameters:
        - $ref: '#/components/parameters/ModeParam'
        - $ref: '#/components/parameters/IncrementalParam'
        - $ref: '#/components/parameters/LanguageParam'
        - $ref: '#/components/parameters/SettingsParam'
      responses:
        '200':
          description: OK (Makefile returned)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/makefile"
        '500':
          description: Failed to return Makefile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/general-error"

  /join:
    get:
      tags:
        - Analysis
      summary: Join
      description: |
        Joins an existing build.

        In the response of a text analysis you can find a hash number. This hash can be used to join an earlier build.

        The response contains the chosen settings, the original text and the result of the annotation.
      parameters:
        - $ref: '#/components/parameters/IncrementalParam'
        - $ref: '#/components/parameters/HashParam'
      responses:
        '200':
          description: The settings, input text, hash number and text analysis in XML
          # content:
          #   application/json:
          #     schema:
          #       $ref: "#/components/schemas/??"
        '500':
          description: Failed to join build
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/general-error"

  /api:
    get:
      tags:
        - General
      summary: API documentation
      description: |
        Shows an API documentation (HTML).

        Example call:

        [`[SBURL]/api`]([SBURL]/api)
      responses:
        '200':
          description: Backend responds.
  /apispec:
    get:
      tags:
        - General
      summary: API specification
      description: |
        Serves the API specification (JSON).

        Example call:

        [`[SBURL]/apispec`]([SBURL]/apispec)
      responses:
        '200':
          description: Backend responds.

  /status:
    get:
      tags:
        - General
      summary: Status
      description: Returns the status of existing builds.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK (successfully authenticated)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/status"
        '401':
          description: "Failed to show status: secret key could not be confirmed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/authentication-error"
        '500':
          description: Failed to show status
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/general-error"

  /ping:
    get:
      tags:
        - General
      summary: Ping backend
      description: |
        Pings the backend, responds with the status of the catapult.

        Example call:

        [`[SBURL]/ping`]([SBURL]/ping)
      responses:
        '200':
          description: OK (catapult responds)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ping"
        '500':
          description: Failed to ping catapult
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/general-error"

  /upload:
    post:
      tags:
        - Files
      summary: File upload
      description: |
        Handles file uploads and runs the analysis.

        Example call:

        ```.bash
        curl -X POST -F files[]=@/path/to/file/myfile.txt [SBURL]/upload?
        ```
      parameters:
        - $ref: '#/components/parameters/ModeParam'
        - $ref: '#/components/parameters/LanguageParam'
        - $ref: '#/components/parameters/SettingsParam'
        - name: email
          in: query
          required: false
          description: The user's email address
          schema:
            type: string
            default: ""
      requestBody:
        description: Files to be uploaded and analysed
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: binary
          text/xml:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Download link
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/file-result"
        '500':
          description: Analysis failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/general-error"

  /download:
    get:
      tags:
        - Files
      summary: File download
      description: Handles download of result files.
      parameters:
        - $ref: '#/components/parameters/HashParam'
      responses:
        '200':
          description: Zip file downloaded
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '500':
          description: Download failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/general-error"

  /cleanup:
    get:
      tags:
        - Cleanup
      summary: Cleanup
      description: "Removes builds that are finished and haven’t been accessed within the timeout (default: 7 days)."
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK (old builds removed)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/cleanup'
                  - $ref: '#/components/schemas/no-cleanup'
        '500':
          description: Failed to remove builds
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/general-error"
        '401':
          description: "Cleanup failed: secret key could not be confirmed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/authentication-error"

  /cleanup/errors:
    get:
      tags:
        - Cleanup
      summary: Cleanup errors
      description: "Removes builds that are finished and haven’t been accessed within the timeout (default: 7 days) and the builds with status Error."
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK (cleanup succeeded)
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/cleanup'
                  - $ref: '#/components/schemas/no-cleanup'
        '500':
          description: Failed to remove builds
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/general-error"
        '401':
          description: "Cleanup failed: secret key could not be confirmed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/authentication-error"

  /cleanup/forceone:
    get:
      tags:
        - Cleanup
      summary: Cleanup one build
      description: Removes a single build.
      parameters:
        - $ref: '#/components/parameters/HashParam'
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK (build removed)
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/cleanup-one'
        '500':
          description: Failed to remove build
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/general-error"
        '401':
          description: "Cleanup failed: secret key could not be confirmed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/authentication-error"
        '400':
          description: "No hash supplied"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/general-error"

  /cleanup/forceall:
    get:
      tags:
        - Cleanup
      summary: Cleanup all builds
      description: Removes all the existing builds.
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: OK (builds removed)
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/cleanup'
        '500':
          description: Failed to remove builds
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/general-error"
        '401':
          description: "Cleanup failed: secret key could not be confirmed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/authentication-error"

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: secret_key
  parameters:
    SettingsParam:
      name: settings
      in: query
      required: false
      description: The settings to be used for the analysis
      # schema:
      #   $ref: '#/components/schemas/SettingsSchema'
    ModeParam:
      name: mode
      in: query
      required: false
      description: The input mode
      schema:
        type: string
        default: plain
        enum:
        - plain
        - xml
        - file
    IncrementalParam:
      name: incremental
      in: query
      required: false
      description: |
        Set to `true` if you want to receive more information on how the analysis is being processed.
        Note: Incremental information can only be displayed if your query is run for the first time.
        The progress information is not available for older builds.
      schema:
        type: boolean
        default: false
    HashParam:
      name: hash
      in: query
      required: true
      description: Hash of the analysis
      schema:
        type: string
    LanguageParam:
      name: language
      in: query
      required: false
      description: |
        The language of the text to be analysed.
        Check [this language table](https://spraakbanken.gu.se/eng/research/infrastructure/sparv/distribution/pipeline#language_table) for more information.
      schema:
        type: string
        default: sv
        enum:
        - bg
        - ca
        - nl
        - et
        - en
        - fr
        - fi
        - gl
        - de
        - it
        - la
        - "no"
        - pl
        - pt
        - ru
        - sk
        - sl
        - sv
        - sv-1800
        - es
  schemas:
    # SettingsSchema:
    #   $ref: 'sparv_settings.json'
    status:
      type: object
      properties:
        builds:
          type: array
          items:
            properties:
              accessed:
                type: string
                example: "2018-05-11 18:29:57"
              accessed-secs-ago:
                type: integer
                example: 326021.5
              hash:
                type: string
                example: d91d063efb5a8439643147c7367e3a4ddad5ec63
              since:
                type: string
                example: "2018-05-11 18:48:32"
              status:
                type: string
                example: Done
    ping:
      type: object
      properties:
        message:
          type: string
          example: "PONG"
        time:
          type: integer
          example: 0.0081
    general-error:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: Some error message
    authentication-error:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string
              example: Authentication failed.
    makefile:
      type: object
      properties:
        makefile:
          type: string
          example: |
            include $(SPARV_MAKEFILES)/Makefile.config
            corpus = untitled
            original_dir = original

            vrt_columns_annotations = word pos msd baseform lemgram sense complemgram compwf sentiment sentimentclass ref dephead.ref deprel
            vrt_columns             = word pos msd lemma    lex     sense complemgram compwf sentiment sentimentclass ref dephead     deprel

            vrt_structs_annotations = sentence.id paragraph.n text text.lix text.ovix text.nk
            vrt_structs             = sentence:id paragraph   text text:lix text:ovix text:nk

            xml_elements    = text
            xml_annotations = text

            token_chunk = sentence
            token_segmenter = better_word

            sentence_chunk = paragraph
            sentence_segmenter = punkt_sentence

            paragraph_chunk = text
            paragraph_segmenter = blanklines

            include $(SPARV_MAKEFILES)/Makefile.rules
    file-result:
      type: object
      properties:
        build:
          type: object
          properties:
            hash:
              type: string
              example: a1b1de8f3508c5928352dbfc538025231a336801-f
            type:
              type: string
              example: files
        corpus:
          type: object
          properties:
            link:
              type: string
              example: "[SBURL]/download?hash=a1b1de8f3508c5928352dbfc538025231a336801-f"
    cleanup:
      type: object
      properties:
        removed-builds:
          items:
            type: array
            format: string
            example: [d91d063efb5a8439643147c7367e3a4ddad5ec63, a1b1de8f3508c5928352dbfc538025231a336801-f]
    cleanup-one:
      type: object
      properties:
        removed-builds:
          items:
            type: array
            format: string
            example: [d91d063efb5a8439643147c7367e3a4ddad5ec63]
    no-cleanup:
      type: object
      properties:
        message:
          type: string
          example: No hashes to be removed.
